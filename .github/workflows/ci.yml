name: 🔍 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# 同時実行制御：同じPRで複数のCI実行を防ぐ
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 共通パッケージを最初にビルド
  shared-build:
    name: 🔧 Build Shared Package
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build shared package
        run: pnpm --filter=shared build

      - name: 📤 Upload shared build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shared-dist
          path: packages/shared/dist
          retention-days: 1

  # Lint・TypeCheck・テストを実行（sharedビルド後）
  quality-check:
    name: 🧹 Code Quality Check
    runs-on: ubuntu-latest
    needs: [shared-build]
    
    strategy:
      fail-fast: false
      matrix:
        package: [backend, shared, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download shared build artifacts
        if: matrix.package != 'shared'
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: packages/shared/dist

      - name: 🏗️ Build shared package (if shared)
        if: matrix.package == 'shared'
        run: pnpm --filter=shared build

      - name: 🧹 Run ESLint
        run: pnpm --filter=${{ matrix.package }} lint
        continue-on-error: false

      - name: 🔍 Run TypeScript Check
        run: pnpm --filter=${{ matrix.package }} typecheck
        continue-on-error: false

      - name: 🧪 Run Tests
        run: pnpm --filter=${{ matrix.package }} test
        continue-on-error: false

      # テストカバレッジレポートの生成（将来実装）
      # - name: 📊 Generate Coverage Report
      #   run: pnpm --filter=${{ matrix.package }} test:coverage
      #   continue-on-error: true

  # 全体統合チェック
  integration-check:
    name: 🔗 Integration Check
    runs-on: ubuntu-latest
    needs: [shared-build, quality-check]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download shared build artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: packages/shared/dist

      # Cloudflare Workers開発サーバー起動テスト
      - name: 🧪 Test Wrangler Dev Startup
        run: |
          cd packages/backend
          timeout 30s pnpm dev || exit_code=$?
          if [ ${exit_code} -eq 124 ]; then
            echo "✅ Wrangler dev started successfully (timed out as expected)"
            exit 0
          elif [ ${exit_code} -eq 0 ]; then
            echo "✅ Wrangler dev started successfully"
            exit 0
          else
            echo "❌ Wrangler dev failed to start"
            exit 1
          fi

      # プロジェクト全体のビルド確認
      - name: 🏗️ Build Check
        run: |
          echo "✅ All quality checks passed!"
          echo "📦 Packages: backend, shared, frontend"
          echo "🎯 Ready for deployment pipeline!"

  # CI成功通知
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality-check, integration-check]
    if: success()
    
    steps:
      - name: 🎉 All Checks Passed
        run: |
          echo "🎉 CI Pipeline completed successfully!"
          echo "✅ Code quality checks passed"
          echo "✅ TypeScript compilation successful" 
          echo "✅ All tests passed"
          echo "✅ Integration checks completed"
          echo ""
          echo "Ready for merge! 🚀"